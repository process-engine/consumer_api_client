#!/usr/bin/env groovy

def cleanup_workspace() {
  cleanWs()
  dir("${env.WORKSPACE}@tmp") {
    deleteDir()
  }
  dir("${env.WORKSPACE}@script") {
    deleteDir()
  }
  dir("${env.WORKSPACE}@script@tmp") {
    deleteDir()
  }
}

def buildIsRequired = true

pipeline {
  agent any
  options {
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20'))
  }
  tools {
    nodejs "node-lts"
  }
  environment {
    NPM_RC_FILE = 'process-engine-ci-token'
    NODE_JS_VERSION = 'node-lts'
  }

  stages {
    stage('Check if build is required') {
      steps {
        script {
          // Taken from https://stackoverflow.com/questions/37755586/how-do-you-pull-git-committer-information-for-jenkins-pipeline
          sh 'git --no-pager show -s --format=\'%an\' > commit-author.txt'
          def commitAuthorName = readFile('commit-author.txt').trim()

          def ciAdminName = "admin" // jenkins will set this name after every restart, so we need to look out for this.
          def ciUserName = "process-engine-ci"

          echo(commitAuthorName)
          echo("Commiter is process-engine-ci: ${commitAuthorName == ciUserName || commitAuthorName == ciAdminName}")

          buildIsRequired = commitAuthorName != ciAdminName && commitAuthorName != ciUserName

          if (!buildIsRequired) {
            echo("Commit was made by process-engine-ci. Skipping build.")
          }
        }
      }
    }
    stage('prepare') {
      when {
        expression {buildIsRequired == true}
      }
      steps {
        dir('javascript') {
          script {
            raw_package_version = sh(script: 'node --print --eval "require(\'./package.json\').version"', returnStdout: true).trim();
            package_version = raw_package_version.trim()
            echo("Package version is '${package_version}'")
          }
          nodejs(configId: env.NPM_RC_FILE, nodeJSInstallationName: env.NODE_JS_VERSION) {
            sh('node --version')
            sh('npm ci --ignore-scripts')
          }
        }
      }
    }
    stage('build') {
      when {
        expression {buildIsRequired == true}
      }
      steps {
        dir('javascript') {
          sh('node --version')
          sh('npm run build')
        }
      }
    }
    stage('publish') {
      when {
        expression {buildIsRequired == true}
      }
      steps {
        dir('javascript') {
          script {
            def branch = env.BRANCH_NAME;
            def branch_is_master = branch == 'master';
            def new_commit = env.GIT_PREVIOUS_COMMIT != env.GIT_COMMIT;

            if (branch_is_master) {
              if (new_commit) {
                script {
                  // let the build fail if the version does not match normal semver
                  def semver_matcher = package_version =~ /\d+\.\d+\.\d+/;
                  def is_version_not_semver = semver_matcher.matches() == false;
                  if (is_version_not_semver) {
                    error('Only non RC Versions are allowed in master')
                  }
                }

                def raw_package_name = sh(script: 'node --print --eval "require(\'./package.json\').name"', returnStdout: true).trim();
                def current_published_version = sh(script: "npm show ${raw_package_name} version", returnStdout: true).trim();
                def version_has_changed = current_published_version != raw_package_version;

                if (version_has_changed) {
                  nodejs(configId: env.NPM_RC_FILE, nodeJSInstallationName: env.NODE_JS_VERSION) {
                    sh('node --version')
                    sh('npm publish --ignore-scripts')
                  }
                } else {
                  println 'Skipping publish for this version. Version unchanged.'
                }
              }

            } else {
              // when not on master, publish a prerelease based on the package version, the
              // current git commit and the build number.
              // the published version gets tagged as the branch name.
              def first_seven_digits_of_git_hash = env.GIT_COMMIT.substring(0, 8);
              def publish_version = "${package_version}-${first_seven_digits_of_git_hash}-b${env.BUILD_NUMBER}";
              def publish_tag = branch.replace("/", "~");

              nodejs(configId: env.NPM_RC_FILE, nodeJSInstallationName: env.NODE_JS_VERSION) {
                sh('node --version')
                sh("npm version ${publish_version} --no-git-tag-version --force")
                sh("npm publish --tag ${publish_tag} --ignore-scripts")
              }
            }
          }
        }
      }
    }
    stage('cleanup') {
      when {
        expression {buildIsRequired == true}
      }
      steps {
        script {
          // this stage just exists, so the cleanup-work that happens in the post-script
          // will show up in its own stage in Blue Ocean
          sh(script: ':', returnStdout: true);
        }
      }
    }
  }
  post {
    always {
      script {
        cleanup_workspace();
      }
    }
  }
}
